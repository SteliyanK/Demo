from pickle import TRUE
import cv2
import numpy as np

def empty(img):
    pass

video=cv2.VideoCapture(1)
cv2.namedWindow("TrackBar")
cv2.resizeWindow("TrackBar", 600, 300)
cv2.createTrackbar("hue_min", "TrackBar", 0, 179, empty)
cv2.createTrackbar("hue_max", "TrackBar", 179, 179, empty)
cv2.createTrackbar("sat_min", "TrackBar", 0, 255, empty)
cv2.createTrackbar("sat_max", "TrackBar", 255, 255, empty)
cv2.createTrackbar("val_min", "TrackBar", 0, 255, empty)
cv2.createTrackbar("val_max", "TrackBar", 255, 255, empty)

while True:
    ret,img=video.read()
    hsv=cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    hue_min=cv2.getTrackbarPos("hue_min", "TrackBar")
    hue_max=cv2.getTrackbarPos("hue_max", "TrackBar")
    sat_min=cv2.getTrackbarPos("sat_min", "TrackBar")
    sat_max=cv2.getTrackbarPos("sat_max", "TrackBar")
    val_min=cv2.getTrackbarPos("val_min", "TrackBar")
    val_max=cv2.getTrackbarPos("val_max", "TrackBar")

    lower=np.array([hue_min, sat_min, val_min])
    upper=np.array([hue_max, sat_max, val_max])
    mask=cv2.inRange(hsv, lower, upper)
    lower_green = np.array([37, 73, 145])
    upper_green = np.array([79, 255, 255])
    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    cnts1, hei=cv2.findContours(mask_green, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    for c in cnts1:
        area=cv2.contourArea(c)
        if area>300:
            peri=cv2.arcLength(c,True)
            approx=cv2.approxPolyDP(c, 0.02*peri, True)
            x,y,w,h=cv2.boundingRect(c)
            cv2.rectangle(img, (x,y), (x+w, y+h), (0, 255, 0), 2)
            cv2.putText(img, "Points: "+str(len(approx)), (x+w+20, y+h+20), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
        if len(approx)==4:
            cv2.putText(img, "Green Rectangle", (x+w+20, y+h+45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
        elif len(approx)==3:
            cv2.putText(img, "Green Triangle", (x+w+20, y+h+45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
        else:
            cv2.putText(img, "Green Circle", (x+w+20, y+h+45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
            lower_green = np.array([37, 73, 145])
    lower_red = np.array([0, 85, 192])
    upper_red = np.array([20, 255, 255])
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    cnts2, hei=cv2.findContours(mask_red, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    for c in cnts2:
        area=cv2.contourArea(c)
        if area>300:
            peri=cv2.arcLength(c,True)
            approx=cv2.approxPolyDP(c, 0.02*peri, True)
            x,y,w,h=cv2.boundingRect(c)
            cv2.rectangle(img, (x,y), (x+w, y+h), (0, 255, 0), 2)
            cv2.putText(img, "Points: "+str(len(approx)), (x+w+20, y+h+20), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
        if len(approx)==4:
            cv2.putText(img, "Red Rectangle", (x+w+20, y+h+45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
        elif len(approx)==3:
            cv2.putText(img, "Red Triangle", (x+w+20, y+h+45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
        else:
            cv2.putText(img, "Red Circle", (x+w+20, y+h+45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
    lower_blue = np.array([80, 80, 130])
    upper_blue = np.array([179, 255, 255])
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    cnts3, hei=cv2.findContours(mask_blue, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    for c in cnts3:
        area=cv2.contourArea(c)
        if area>300:
            peri=cv2.arcLength(c,True)
            approx=cv2.approxPolyDP(c, 0.02*peri, True)
            x,y,w,h=cv2.boundingRect(c)
            cv2.rectangle(img, (x,y), (x+w, y+h), (0, 255, 0), 2)
            cv2.putText(img, "Points: "+str(len(approx)), (x+w+20, y+h+20), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
        if len(approx)==4:
            cv2.putText(img, "Blue Rectangle", (x+w+20, y+h+45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
        elif len(approx)==3:
            cv2.putText(img, "Blue Triangle", (x+w+20, y+h+45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
        else:
            cv2.putText(img, "Blue Circle", (x+w+20, y+h+45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
    lower_yellow = np.array([20, 85, 192])
    upper_yellow = np.array([35, 255, 255])
    mask_yellow = cv2.inRange(hsv, lower_yellow, upper_yellow)
    cnts4, hei=cv2.findContours(mask_yellow, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    for c in cnts4:
        area=cv2.contourArea(c)
        if area>300:
            peri=cv2.arcLength(c,True)
            approx=cv2.approxPolyDP(c, 0.02*peri, True)
            x,y,w,h=cv2.boundingRect(c)
            cv2.rectangle(img, (x,y), (x+w, y+h), (0, 255, 0), 2)
            cv2.putText(img, "Points: "+str(len(approx)), (x+w+20, y+h+20), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
        if len(approx)==4:
            cv2.putText(img, "Yellow Rectangle", (x+w+20, y+h+45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
        elif len(approx)==3:
            cv2.putText(img, "Yellow Triangle", (x+w+20, y+h+45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
        else:
            cv2.putText(img, "Yellow Circle", (x+w+20, y+h+45), cv2.FONT_HERSHEY_COMPLEX, 0.7, (0,255,0), 2)
    cv2.imshow("Frame", img)
    cv2.imshow("hsv", hsv)
    cv2.imshow("Mask", mask)
    k=cv2.waitKey(1)
    if k==ord('q'):
        break
video.release
cv2.destroyAllWindows

#red min-0, 85, 192
#red max-20, 255, 255

#blue min-80, 80, 179
#blue max-110, 255, 255

#yellow min-20, 85, 192
#yellow max-35, 255, 255